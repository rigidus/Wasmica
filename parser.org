#+STARTUP: showall indent hidestars

#+TITLE: Wasmico Parser

The parser is responsible for parsing Wasm bytecode and building an internal representation of the module, which is then used by other parts of the system such as the interpreter, JIT compiler, and runtime.

* The parser's external interface

These functions and types are used by the external code and make up the parser interface:

Functions:
- ~ParseModule~: The main function for parsing Wasm bytecode into a Module structure.
- ~LoadModule~: Loads the module into the runtime, initializing memory, global variables, and other components.

Types:
- ~Module~: A structure containing parsed module data such as functions, global variables, tables, and memory.
  After parsing via ParseModule, it is passed to LoadModule or used directly to access module components (e.g., to call functions or read memory).
- ~FuncType~: Description of the function type (parameters and return values).
  Used to interpret or compile functions from Module to understand what arguments to pass and what to expect in the output.
- ~GlobalType~: Global variable type (value and modifiability).
  Used to initialize global variables in runtime or to read/write them at runtime.
- ~TableType~: Type of table (for example, for storing pointers to functions).
  Used to work with tables in runtime, for example, to call functions by index.
- ~MemoryType~: Type of linear memory (minimum and maximum size).
  Used to allocate and manage module memory in runtime.

* Internal parser components

These functions and types are only used internally within the parser and can be encapsulated:

Functions:

- ~ReadLebUnsigned~: Reads an unsigned LEB128-unsigned number from bytecode.
- ~ReadLebSigned~: Reads a signed LEB128 number from bytecode.
- ~ParseSection~: Processes an individual module section (e.g., a code section).
- ~ParseFunctionSection~: Parses a function section.
- ~ParseCodeSection~: Parses a code section.
- ~ParseGlobalSection~: Parses the global variables section.
- ~ParseTableSection~: Parses the table section.
- ~ParseMemorySection~: Parses the memory section.
- ~ParseExportSection~: Parses the exports section.
- ~ParseImportSection~: Parses the imports section.
- ~ParseDataSection~: Parses the data section.
- ~ParseElementSection~: Parses the element section.

Types:

- ~Section~: An internal structure for representing module sections.
  Used only inside section parsing functions.
- ~Instruction~: A structure for representing Wasm instructions.
  Used when parsing a code section to temporarily store instructions.

* Sequence of calls when parsing a Wasm file

- Reading the file:
  - External code (such as main.c) reads the Wasm file into memory.
- ~ParseModule~ call:
  - ~ParseModule~ initializes the ~Module~ structure.
  - Then calls ~ParseSection~ for each section in the bytecode.
- Section Parsing:
  - ~ParseSection~ determines the type of section and calls the appropriate function:
  - ~ParseFunctionSection~ for a function section.
  - ~ParseCodeSection~ for the code section.
  - ~ParseGlobalSection~ for the global variables section.
  - etc.
- Section data processing:
  - Each section parsing function (such as ~ParseFunctionSection~) reads the section data, using ~ReadLebUnsigned~ and ~ReadLebSigned~ to decode the numbers.
  - The data is stored in the appropriate fields of the ~Module~ structure.
- Completing the parsing:
  - After all sections have been processed, ~ParseModule~ returns a completed ~Module~ structure.
  - Loading Module:
    - The external code calls ~LoadModule~, passing ~Module~ and ~Runtime~.
    - ~LoadModule~ initializes the runtime with data from ~Module~, such as memory, global variables, and tables.

* Formation of data structures

The parser generates the following key data structures:

- ~Module~: Contains arrays of functions, global variables, tables, memory, etc.
  Each function is represented as a ~Function~, containing a ~FuncType~ and bytecode.
- ~FuncType~: Describes the function signature: parameters and return values.
- ~GlobalType~: Describes the global variable: its type and modifiability.
- ~TableType~: Describes a table: its element type and size.
- ~MemoryType~: Describes linear memory: minimum and maximum size.

These structures are used by external code to execute the module, such as function calls or memory accesses.

* External interface:

~ParseModule~ and ~LoadModule~ must be accessible to external code.

The types ~Module~, ~FuncType~, ~GlobalType~, ~TableType~, ~MemoryType~ should also be visible as they are used to interact with the module.

* Internal components:

Section parsing functions (~ParseFunctionSection~, ~ParseCodeSection~, etc.) can be encapsulated since they are only called from ParseSection.

Utility functions (~ReadLebUnsigned~, ~ReadLebSigned~) can also be hidden as they are used only inside the parser.

* Parsing process

Let's say we have a minimal wat-file:

#+BEGIN_SRC lisp
  (module
   (type $t0 (func))
   (func $empty (type $t0))
   (export "empty" (func $empty))
   )
#+END_SRC

After the wat2wasm transformation, it will take this form:

#+BEGIN_SRC text
  00 61 73 6d 01 00 00 00  ; Magic number and version
  01 04 01 60 00 00        ; Section of types: 1 тип, func wthout params and return
  03 02 01 00              ; Section of functions: 1 func with type 0
  07 09 01 05 65 6d 70 74  ; Section of export: 1 export "empty", func idx 0
  79 00
  0a 04 01 02 00 0b        ; Section of code: 1 func, body: empty (end)
#+END_SRC

** ParseModule

The ~ParseModule~ function is the entry point for parsing WASM bytecode. It:
- Initializes the ~Module~ structure.
- Checks the magic number (0x00 0x61 0x73 0x6d) and version (0x01 0x00 0x00 0x00 0x00 0x00).
- Reads sections by calling internal functions to process them.

ParseModule sequence:
- Initialize ~Module~: Creates a ~Module~ structure that will contain all module data (functions, types, exports, etc.).
- Read Header: Auxiliary functions like Read_u8 are used to check the magic number and version.
- Cycle through sections: ParseSection is called for each section, passing it the section ID and a pointer to the bytes.

** ParseSection

The ParseSection function determines the type of a section by its ID and calls the corresponding parsing function:

- Section Types (ID 1): ParseSection_Type
- Function section (ID 3): ParseSection_Function
- Export Section (ID 7): ParseSection_Export
- Code Section (ID 10): ParseSection_Code
- ...

*** Type section (ID 1: 01 04 01 60 00 00 00)

Call: ParseSection_Type

Actions:
- Reads the number of types (ReadLEB_u32 → 1).
- Reads the type (Read_u8 → 0x60 means func).
- Reads the number of parameters (ReadLEB_u32 → 0) and return values (ReadLEB_u32 → 0).
- Creates a FuncType using AllocFuncType and stores it in Module->funcTypes.

Result: The type $t0 (function without parameters and return) is added to Module->funcTypes.

*** Function Section (ID 3: 03 02 01 01 00)

Call: ParseSection_Function

Actions:
- Reads the number of functions (ReadLEB_u32 → 1).
- Reads the type index for each function (ReadLEB_u32 → 0).
- Creates a Module->functions array and associates the function with type $t0.

Result: One function with type $t0 appears in Module->functions.

*** Export Section (ID 7: 07 09 01 01 05 65 6d 70 74 79 00)

Call: ParseSection_Export

Actions:
- Reads the number of exports (ReadLEB_u32 → 1).
- Reads the name length (ReadLEB_u32 → 5), name (Read_utf8 → “empty”), export type (Read_u8 → 0 for function) and index (ReadLEB_u32 → 0).
- Saves the export to Module->exports, associating the name “empty” with the function at index 0.

Result: The “empty” export for the $empty function is added to Module->exports.

*** Code section (ID 10: 0a 04 01 01 02 00 00 0b)

Call: ParseSection_Code

Actions:
- Reads the number of functions (ReadLEB_u32 → 1).
- Reads the size of the function body (ReadLEB_u32 → 2).
- Reads local variables (ReadLEB_u32 → 0, no local variables).
- Reads bytecode (0x00 0x0b - empty body with end instruction).
- Saves bytecode to Module->functions[0].wasm.

Result: An empty bytecode (0x00 0x0b) is written to Module->functions[0].

** Completion of ParseModule

After all sections have been processed, ~ParseModule~ returns a populated ~Module~ structure containing:
- funcTypes: One type $t0.
- functions: One function $empty with type $t0 and an empty body.
- exports: Export “empty” for function $empty.

After parsing, the external code calls ~LoadModule~ to load the module into the runtime

* Source code

Header file for the external interface of the parser.

#+BEGIN_SRC c
  // External declarations
  typedef struct Module Module;
  typedef struct FuncType FuncType;
  typedef struct Global GlobalType;
  typedef struct TableType TableType;
  typedef struct MemoryType MemoryType;

  // External parser functions
  Result ParseModule(IEnvironment i_environment, Module **o_module, const uint8_t *const i_wasmBytes, uint32_t i_numWasmBytes);
  Result LoadModule(IM4Runtime io_runtime, Module *io_module);
#+END_SRC

Parser implementation, including front-end and back-end functions.

#+BEGIN_SRC c
  // External func implementations
  Result ParseModule(IEnvironment i_environment, Module **o_module, const uint8_t *const i_wasmBytes, uint32_t i_numWasmBytes) { /* ... */ }
  Result LoadModule(IM4Runtime io_runtime, Module *io_module) { /* ... */ }

  // Internal functions (static)
  static Result ReadLebUnsigned(u64 *o_value, u32 i_maxNumBits, bytes_t *io_bytes, cbytes_t i_end) { /* ... */ }
  static Result ReadLebSigned(i64 *o_value, u32 i_maxNumBits, bytes_t *io_bytes, cbytes_t i_end) { /* ... */ }
  static Result ParseSection(/* ... */) { /* ... */ }
  static Result ParseSection_Type(/* ... */) { /* ... */ }
  static Result ParseSection_Function(/* ... */) { /* ... */ }
  static Result ParseSection_Export(/* ... */) { /* ... */ }
  static Result ParseSection_Code(/* ... */) { /* ... */ }
  // Another sections: ParseSection_Global, ParseSection_Table, etc.

  // Aixialary funcs
  static Result AllocFuncType(FuncType **o_functionType, u32 i_numTypes) { /* ... */ }
#+END_SRC

Definitions of the data structures used by the parser and external code.

#+BEGIN_SRC c
  struct FuncType {
      struct FuncType *next;
      u16 numRets;
      u16 numArgs;
      u8 types[];
  };

  struct Global { // GlobalType
  };

  struct TableType {
  };

  struct MemoryType {
  };

  struct Module {

      FuncType *funcTypes;
      Function *functions;
      // [TODO]: globals, tables, memory, exports, etc.
  };
#+END_SRC

* Main

#+BEGIN_SRC c :noweb yes :tangle src/parser.c

  #include <stdio.h>
  #include <stdint.h>
  #include <stdlib.h>
  #include <stdbool.h>
  #include <stdint.h>
  #include <stddef.h>
  #include <string.h>
  #include <inttypes.h>
  #include <time.h>
  #include <limits.h>
  #include <stdarg.h>
  #include <ctype.h>
  #include <math.h>

  typedef uint64_t        u64;
  typedef int64_t         i64;
  typedef uint32_t        u32;
  typedef int32_t         i32;
  typedef uint16_t        u16;
  typedef int16_t         i16;
  typedef uint8_t         u8;
  typedef int8_t          i8;

  <<Types>>
  <<Errors>>
  <<Exceptions>>

  <<print_usage>>
  <<err_handler>>

  struct Runtime;
  typedef struct Runtime * IRuntime;

  struct Environment;
  typedef struct Environment * IEnvironment;

  struct Module;
  typedef struct Module * IModule;

  struct Function;
  typedef struct Function * IFunction;

  typedef void * (* ModuleVisitor) (IModule i_module, void * i_info);

  typedef struct ImportInfo
  {
    const char *    moduleUtf8;
    const char *    fieldUtf8;
  } ImportInfo, * IImportInfo;


  #define MAX_MODULES     16

  // -- globs
  static IRuntime runtime;
  static IEnvironment env;
  static u8* wasm_bins[MAX_MODULES];
  int wasm_bins_qty = 0;

  <<repl_init>>

  <<repl_load>>

  #define ARGV_SHIFT()  { i_argc--; i_argv++; }
  #define ARGV_SET(x)   { if (i_argc > 0) { x = i_argv[0]; ARGV_SHIFT(); } }

  #define FATAL(msg, ...) { fprintf(stderr, "Error: [Fatal] " msg "\n", ##__VA_ARGS__); goto _onfatal; }

  int  main  (int i_argc, const char* i_argv[])
  {
      Result result = Err_none;

      const char* argFile = NULL;
      const char* argFunc = "_start";
      unsigned argStackSize = 64*1024;

      ARGV_SHIFT(); // Skip executable name

      while (i_argc > 0)
      {
          const char* arg = i_argv[0];
          if (arg[0] != '-') break;

          ARGV_SHIFT();

          if (!strcmp("--fun", arg)) {
              ARGV_SET(argFunc);
          } else if (!strcmp("--err", arg)) {
              if (i_argc < 1) {
                  print_usage();
                  return err_handler(ErrEntry_missing_cli_arg_for_err);
              }
              const char *code_str = i_argv[0];
              ARGV_SHIFT();

              char *end;
              long code = strtol(code_str, &end, 10);
              if (*end != '\0' ||
                  code < 0 ||
                  code > (sizeof(err_code_map) / sizeof(err_code_map[0])) )
              {
                  print_usage();
                  return err_handler(ErrEntry_out_of_range_err_arg);
              }

              const char *message = NULL;
              for (size_t i = 0;
                   i < sizeof(err_code_map)/sizeof(err_code_map[0]); i++) {
                  if (err_code_map[i]->code == (int)code) {
                      message = err_code_map[i]->error;
                      break;
                  }
              }
              if (message) {
                  printf("%s\n", message);
              } else {
                  printf("Unknown error code: %ld\n", code);
              }
              return ErrEntry_none.code;
          } else {
              print_usage();
              return err_handler(ErrEntry_unknown_cli_param);
          }
      }

      if (i_argc < 1) {
          print_usage();
          return err_handler(ErrEntry_no_file);
      }

      ARGV_SET(argFile);

      _( repl_init(argStackSize) )
      if (result) FATAL("repl_init: %s", result);

      if (argFile) {
          result = repl_load(argFile);
          if (result) FATAL("repl_load: %s", result);
      }

      return ErrEntry_none.code;

  _catch:
      return 0;

  _onfatal:
      if (result) {
          fprintf (stderr, "Error: %s", result);
          fprintf (stderr, "\n");
      }

      return result ? 1 : 0;
  }
#+END_SRC

** Possible errors

*** Missing command line argument for --err

This error occurs when the required argument for the --err parameter is missing

#+BEGIN_SRC elisp :noweb-ref add_err :session err :results output
  (add-to-list 'err-list
               (cons "missing_cli_arg_for_err"
                     "\"--err requires an error code\""))
#+END_SRC

*** Out of range --err argument

#+BEGIN_SRC elisp :noweb-ref add_err :session err :results output
  (add-to-list 'err-list
               (cons "out_of_range_err_arg"
                     "\"Out of range --err argument\""))
#+END_SRC

*** No file for processing

#+BEGIN_SRC elisp :noweb-ref add_err :session err :results output
  (add-to-list 'err-list
               (cons "no_file"
                     "\"No file for processing\""))
#+END_SRC

*** Unknown command line parameter

#+BEGIN_SRC elisp :noweb-ref add_err :session err :results output
  (add-to-list 'err-list
               (cons "unknown_cli_param"
                     "\"Unknown command line parameter\""))
#+END_SRC

** repl_load

#+BEGIN_SRC c :noweb yes :noweb-ref repl_load
  <<parse_module>>

  Result repl_load  (const char* fn)
  {
      FILE* f = NULL;
      _try {
          IModule module = NULL;

          u8* wasm = NULL;
          u32 fsize = 0;

          f = fopen (fn, "rb");
          _throwif(Err_cannot_open_file, !f);

          fseek (f, 0, SEEK_END);
          fsize = ftell(f);
          fseek (f, 0, SEEK_SET);

          _throwif(Err_file_too_small, fsize < 8);
          _throwif(Err_file_too_big, fsize > 256 * 1024 * 1024);

          wasm = (u8*) malloc(fsize);
          _throwifnull(wasm);

          _throwif(Err_cannot_read_file, fread(wasm, 1, fsize, f) != fsize);
          fclose(f);
          f = NULL;

          _ (parse_module (env, &module, wasm, fsize));

          if (wasm_bins_qty < MAX_MODULES) {
              wasm_bins[wasm_bins_qty++] = wasm;
          }

          return result;
      }
  _catch:
      if (f) fclose(f);
      return result;
  }
#+END_SRC

#+BEGIN_SRC elisp :noweb-ref add_err :session err :results output
  (add-to-list 'err-list
               (cons "cannot_open_file" "\"Cannot open file\""))
  (add-to-list 'err-list
               (cons "file_too_small" "\"File is too small\""))
  (add-to-list 'err-list
               (cons "file_too_big" "\"File is too big\""))
  (add-to-list 'err-list
               (cons "cannot_read_file" "\"cannot_read_file\""))
#+END_SRC

** REPL


#+BEGIN_SRC c :noweb yes :noweb-ref repl_init


  Result repl_init (unsigned stack) {
      // repl_free();
      // runtime = NewRuntime (env, stack, NULL);
      if (runtime == NULL) {
          err_handler(ErrEntry_new_runtime_failed);
      }
      return Err_none;
  }
#+END_SRC

#+BEGIN_SRC elisp :noweb-ref add_err :session err :results output
  (add-to-list 'err-list
               (cons "new_runtime_failed"
                     "\"Failed to create a new runtime\""))
#+END_SRC

* Errors

Here we define ERR_STR, and that means that constants will be _defined_ later in this module. In other modules where ERR_STR is not defined, constants will be _declared_. This method will be used if we later want to put the constant definitions in a separate translation module.

Dependency (types):
- Result
- ErrCodeEntry

It also uses the X-Macro technique to avoid code duplication. Its idea is to describe all errors once in a single macro-list and then “expand” this list into:
- Error variable declarations (err_*, ErrEntry_*).
- An array for searching errors (err_code_map).

#+BEGIN_SRC c :noweb yes :noweb-ref Errors

  // ::: Errors
  # define ERR_STR

  # if defined(ERR_STR)
  #   define DEF_ERR(NUM, LBL, MSG) const Result Err_##LBL = { MSG }; \
      static const struct ErrCodeEntry ErrEntry_##LBL = { NUM, Err_##LBL };
  # else
  #   define DEF_ERR(NUM, LBL, MSG) extern const Result Err_##LBL; \
      extern const struct ErrCodeEntry ErrEntry_##LBL;
  # endif

  <<err_list_init()>>
  // Generated Error List
  <<gen_err_list()>>

  // Errors declaration
  #define X(LBL, MSG) const Result Err_##LBL = { MSG };			\
      static const ErrCodeEntry ErrEntry_##LBL = { __COUNTER__, Err_##LBL };
  ERROR_LIST
  #undef X

  // Array off errors
  #define X(LBL, MSG) &ErrEntry_##LBL,
  static const ErrCodeEntry *err_code_map[] = {
      ERROR_LIST
  };
  #undef X

  // Function for retrieving an error by its code
  Result get_err_msg(int code) {
      for (size_t i = 0;
           i < sizeof(err_code_map) / sizeof(err_code_map[0]); i++) {
          if (err_code_map[i]->code == code) {
              return err_code_map[i]->error;
          }
      }
      return "Unknown error code";
  }
#+END_SRC

Say, if we have such a list of errors

#+BEGIN_SRC c
  #define ERROR_LIST												\
      X(none, 0, NULL)											\
      X(invalid_cli_params, 1, "Invalid command-line params")
#+END_SRC

After preprocessing, the code will turn into:

#+BEGIN_SRC c
  const Result Err_none = { NULL };
  static const ErrCodeEntry ErrEntry_none = { 0, Err_none };
  ...
  const Result Err_invalid_cli_params = { "Invalid command-line params" };
  static const ErrCodeEntry ErrEntry_invalid_cli_params = { 1, Err_invalid_cli_params };
  ...
  static const ErrCodeEntry *err_code_map[] = {
      &ErrEntry_none,
      &ErrEntry_invalid_cli_params,
      ...
  };
#+END_SRC

The next level of metaprogramming is to generate the ERROR_LIST dynamically, for which we organize the "err" session and arrange the org-code-blocks so that they reference "err_list_init" and "gen_err_list". This will insert all error definitions at the end of err_list_init:

#+NAME: err_list_init
#+BEGIN_SRC elisp :noweb yes :session err :results output
  (when (boundp 'err-list)
    (makunbound 'err-list))
  (unless (boundp 'err-list)
    (progn
      (defvar err-list nil "List of errors for ERROR_LIST macro.")
      (setf err-list nil)
      (add-to-list 'err-list (cons "none" "NULL"))
      (add-to-list 'err-list (cons "malloc_failed" "\"Cannot allocate memory\""))
      t))
  <<add_err>>
#+END_SRC

This procedure collects all accumulated errors and generates the necessary c-code:

#+NAME: gen_err_list
#+BEGIN_SRC elisp :session err :results value
  (concat "#define ERROR_LIST \\\n"
          (mapconcat
           (lambda (err)
             (format "    X(%s, %s)" (car err) (cdr err)))
           (reverse err-list)
           " \\\n")
          "\n")
#+END_SRC

And in order to add another error, we only need to add it to the list (pay attention to the session in the headers and the fact that such a block must necessarily refer to ADD_REF:

#+BEGIN_SRC elisp :noweb-ref add_err :session err :results output
  (add-to-list 'err-list
               (cons "unknown" "\"Unknown error\""))
#+END_SRC

** Result

#+BEGIN_SRC c :noweb-ref Types

  typedef const char * Result;
#+END_SRC

** ErrCodeEntry

#+BEGIN_SRC c :noweb-ref Types

  typedef struct ErrCodeEntry {
      int code;
      Result error;
  } ErrCodeEntry;
#+END_SRC

** Print usage

Since we have a function to retrieve an error by its code we can now tell the user the error if they request it on the command line. For example, if the program returned an error code on the previous run.

#+BEGIN_SRC c :noweb-ref print_usage

  void print_usage() {
      puts("Usage:");
      puts("  parser [options] <file> [args...]");
      puts("Options:");
      puts("  --err <num_err_code>");
      puts("  --fun <function>  function to run default: _start");
  }
#+END_SRC

** ErrHandler

#+BEGIN_SRC c :noweb-ref err_handler
  int err_handler(ErrCodeEntry param) {
      fprintf(stderr, "\nError (%d): %s \n", param.code, param.error);
      return param.code;
  }
#+END_SRC

* Exceptions

The exception mechanism uses a combination of macros and goto-based control flows to simulate try-catch behavior, which is not natively supported in C.

The design focuses on:
- Simplicity: Using minimal runtime overhead.
- Flexibility: Applicable to any C project with proper integration.

Usage Example demonstrates a simple use case with a function that might fail (we want to ensure that this kind of code can work:):

#+BEGIN_SRC c
  Result might_fail_fn (uint32_t size, uint32_t idx, uint32_t tbl[])
  {
      _try {
          if (idx >= size) {
              _throw ("index out of range");
          }
          uint32_t elt = tbl[idx];
          _ (process_element(elt))
      }
  _catch:
      return result;
  }
#+END_SRC

To do so, by exposing macros it must be converted to this code:

#+BEGIN_SRC c
  Result might_fail_fn (uint32_t size, uint32_t idx, uint32_t tbl[])
  {
      Result result = Err_none;
      {
          if (idx >= size) {
              result = "index out of range";
              EXCEPTION_PRINT (result);
              goto _catch;
          }
          uint32_t elt = tbl[idx];
          result = process_element(elt);
          if (UNLIKELY(result)) {
              EXCEPTION_PRINT (result);
              goto _catch;
          }
      }
  _catch:
      return result;
  }
#+END_SRC

Thus, we will only need a few macros and one function for implementation:

#+BEGIN_SRC c :noweb yes :noweb-ref Exceptions

  <<un__likely>>

  <<stringify>>

  #define EXCEPTION_PRINT(ERROR) ExceptionBreakpoint ((char*)ERROR, (__FILE__ ":" STRINGIFY(__LINE__)))

  #define _try  Result result = Err_none;
  #define _(TRY)  { result = TRY; if (UNLIKELY(result)) { EXCEPTION_PRINT (result); goto _catch; } }
  #define _throw(ERROR)  { result = ERROR; EXCEPTION_PRINT (result); goto _catch; }
  #define _throwif(ERROR, COND)  if (UNLIKELY(COND)) { _throw(ERROR); }
  #define _throwifnull(PTR) _throwif (Err_malloc_failed, !(PTR))

  void ExceptionBreakpoint (char* i_exception, char* i_message)
  {
      printf ("\nexception: '%s' @ %s\n", i_exception, i_message);
      return;
  }
#+END_SRC

Dependency: Since the default value of ~Result~ is ~Err_none~, the exception mechanism depends on [[*Errors][Errors]].

** Stringify

#+BEGIN_SRC c :noweb-ref stringify
  #define STRINGIFY__(x) #x
#+END_SRC

The ~#~ operator in the C preprocessor is a special tool that "stringifies" its argument. This means it takes whatever ~x~ is and wraps it in double quotes to make a string literal. When you use STRINGIFY__(abc), the preprocessor replaces ~x~ with ~abc~ and the ~#~ turns it into ~"abc"~.

#+BEGIN_SRC c
  STRINGIFY__(hello) → "hello"
  STRINGIFY__(123)   → "123"
#+END_SRC

Key point: This macro works directly on the argument you pass. If you give it a macro like __LINE__ (which represents the current line number), it won’t expand ~__LINE__~ -it will just stringify it as ~"__LINE__"~. That’s where the next macro comes in.

#+BEGIN_SRC c :noweb-ref stringify
  #define STRINGIFY(x) STRINGIFY__(x)
#+END_SRC

This macro calls ~STRINGIFY__~ with the argument ~x~. At first glance, it might seem redundant - why not just use ~STRINGIFY__~ directly? The trick is that this extra step ensures any macros passed as arguments get expanded before stringification happens.

Why it is needed: In C, if you pass a macro (like ~__LINE__~) directly to ~#~, the preprocessor doesn’t expand it - it just stringifies the macro’s name. But if you wrap it in another macro like ~STRINGIFY~, the preprocessor expands the argument first, then passes it to STRINGIFY__ for stringification.

How it works:
- You write STRINGIFY(__LINE__).
- Suppose ~__LINE__~ is 42 (the current line number). The preprocessor expands ~__LINE__~ to ~42~.
- Then ~STRINGIFY(42)~ becomes ~STRINGIFY__(42)~.
- Finally, STRINGIFY__(42) uses ~#~ to turn ~42~ into ~"42"~.

** (Un)Likely

The LIKELY and UNLIKELY macros are used to provide the compiler with branch prediction hints. These hints help optimize code execution in performance-critical sections by indicating which conditions are most likely to be true or false. The implementation of macros depends on the compiler used: for GCC, Clang and ICC the built-in ~__builtin_expect~ function is used, while for other compilers macros simply return the original expression.

This allows the compiler to optimize the code by placing the "improbable" branch in a way that minimizes delays in the processor pipeline.

The ~!!~ operator converts any value to a boolean value (0 or 1), which is required for a ~__builtin_expect~.

#+BEGIN_SRC c :noweb-ref un__likely
  # if defined(__clang__)
  #  define COMPILER_CLANG 1
  # elif defined(__INTEL_COMPILER)
  #  define COMPILER_ICC 1
  # elif defined(__GNUC__) || defined(__GNUG__)
  #  define COMPILER_GCC 1
  # elif defined(_MSC_VER)
  #  define COMPILER_MSVC 1
  # else
  #  warning "Compiler not detected"
  # endif

  # if defined(COMPILER_GCC) || defined(COMPILER_CLANG) || defined(COMPILER_ICC)
  #  define UNLIKELY(x) __builtin_expect(!!(x), 0)
  #  define LIKELY(x)   __builtin_expect(!!(x), 1)
  # else
  #  define UNLIKELY(x) (x)
  #  define LIKELY(x)   (x)
  # endif
#+END_SRC
